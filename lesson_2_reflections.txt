What happens when you initialize a repository? Why do you need to do it?
	
	It gets tied to the directory of your git init. 
	This way the files in that directory will be inside the git repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?
	
	The staging area contains files that are being prepared to be
	committed. The	repository contains files from the directory that 		have been committed. And the directory contains files that are tied to 		the repository and can be contained in it.

How can you use the staging area to make sure you have one commit per logical change?
	
	The staging area is a sort of 'waitroom' for changes to either be
	committed separately or to wait for a logical group to gather and
	than be committed together.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	When you are making changes you are not yet committed too; when you are making changes for different
	versions of your program; .. 
	Branches help to make sure you don't clutter up your history. You can make changes and experiment
	without having to go digging deep into your history in order to find the previous version
	or just a different version.

How do the diagrams help you visualize the branch structure?

	Litterly. It helps by giving you a representational view of your branch structure, identifying unreachable
	commits.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	It merges the commits together to make one branch containing all commits from both merged branches. 
 
What are the pros and cons of Git's automatic merging vs. always doing merges manually?

	pro: Faster; Git makes you aware of conflicts; You can more easily figure out differences in code between you and your colleague.
	cons: I can imagine it sometimes creates conflicts where there are no real conflicts.


	

	
